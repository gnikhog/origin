What happens when you initialize a repository? Why do you need to do it?
  Git initializes the repository and reports the names of files currently
  available in the current directory/repository.  You are notified that git
  is not currently tracking any files and you are reminded to to use
  git add to begin tracking files. This will allow you to track some files
  but not others as appropritate to your project.

How is the staging area different from the working directory and the
repository?
  The staging area is temporary holding location for snapshots of files in the
  current working directory prior to being committed and tracked in the git
  respository. The working directory is used to hold file that may be
  committed as well as files that will never be committed and tracked.  

What value do you think it offers?
  This allows you to keep committed file separate from working directory files
  while managing the change/update process.  It reduces the likelihood of
  dumping a file that you would otherwise want to retain.

How can you use the staging area to make sure you have one commit per logical
change?
  By checking to make sure that the working directory copy of a file is the
  same as the stagining area (i.e.no differences) and the repository version
  does differ from the staging area.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?
  Branches could be helpful while developing new functionality or methods to
  avoid ruining the performance of an existing (master) branch. They could
  also be useful in sharing with others or to demark a specific time/
  functionality  while develpment contiues.

How do the diagrams help you visualize the branch structure?
  They allow you to see which commits belong to branch as well as any changes
  that have ocurred since the branch was created.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  The result is a combination of the changes in both (all) branches subject to
  a few rules:
    1- Unchanged lines are included
    2- Deleted lines are excluded
    3- Added line are included
  git log --graph --oneline allows you to follow all the commits for all
  branches to better understand what changes were committed where prior to
  and including the merge of branches.

What are the pros and cons of Git's automatic merging vs. always doing
merges manually?
  Pros:
  1- Time and effort saver
  2- Only required to address conflicts
  3- Highlights the area of conflict and displays the differing code plus
     the original code.
  Cons:
  1- More tedious to manage (i.e. locate conflicting code)
  2- More prone to errors of omission or possible failure to completely
     resolve conflicts
