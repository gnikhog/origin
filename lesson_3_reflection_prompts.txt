When would you want to use a remote repository rather than keeping all your 
work local?
  Remote repositories are great when working from multiple computers as well as
  working as part of a group. Remote repositories expand accessibility at the
  expense of having to use a network to acccess THE remote location.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
  Automatic pull could overwrite or otherwise interfer with your work should
  someone else be working on the same file and issuing commits.  Manual pulls
  ensure that you only update your file(s) when you are ready.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?
  Branches occur only within a given repository and are used to explore or to
  develop changes in the code or to otherwise label a give code version.
  Clones are copies of repositories that can be locally or remotely located.
  These are used to make copies of entire repositories.  Forks are essentially
  clones of repositories but retain links to the original repsository and is
  completely created while on the GitHub website.

What is the benefit of having a copy of the last known state of the remote
stored locally?
  It allows you to work with the most recent copy of files in case you need to
  work remotely without network/Internet access. It also provides a backup
  copy of the remote repo in the event of a remote repo storage disaster/loss.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
  If I was familiar with other revision control system tools, I'm sure that
  I would have a quick answer. Since I don't, collaboration would be
  a tedious, manual process that would be very difficult to manage depending
  upon the number of contributers and the frequency of changes/commits.
  Just managing my own changes is difficult enough without the use of a
  rev. control system/tool.  I don't want to even consider managing more!

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?
  Making changes in a separate branch is very appropriate for project where
  multiple people are collaboration and potentially changing the same files
  at the same time. Branches also help to isolate changes that have not been
  thoroughly tested.  Keeping changes in a branch also helps to keep others
  who are reviewing and otherwise providing feedback to look a stationary
  codeset so as not to have to review a moving target.


